1.
Link - https://leetcode.com/problems/non-decreasing-array/
Code - 
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        int violation = 0;
        for(int i=1;i<nums.size();i++){
            // case for violation
            if(nums[i-1] > nums[i]){
                
                // at max, we can have one violation. So if it has been occured before => return false
                if(violation == 1){
                    return false;
                }
                //if no prev violation, then violation++
                violation++;
               
                // fixing violation => operation 1
                if(i<2 || nums[i-2] <= nums[i])
                    nums[i-1] = nums[i];
                // fixing violation => operation 2
                else
                    nums[i] = nums[i-1];
                
            }
        }
        // if traversal of vector was successfull and return statement was not invoked then return true.
        return true;
    }
};

2.
Link - https://leetcode.com/problems/left-and-right-sum-differences/
Code - 
class Solution {
public:
    vector<int> leftRightDifference(vector<int>& nums) {
        vector<int>ans;
        vector<int>pos1;
        int t=0;
        pos1.push_back(0);
        for(int i=0;i<nums.size();i++){
            pos1.push_back(nums[i]+t);
            t+=nums[i];
        }
        reverse(nums.begin(),nums.end());
        vector<int> pos2;
        pos2.push_back(0);
        t=0;
        for(int i=0;i<nums.size();i++){
            pos2.push_back(nums[i]+t);
            t+=nums[i];
        }
        reverse(pos2.begin(),pos2.end());
        // for(int i=0;i<pos1.size();i++){
        //     cout<<pos1[i]<<" ";
        // }
        // cout<<endl;
        //  for(int i=0;i<pos2.size();i++){
        //      cout<<pos2[i];
        // }
        int j=1;
        while(j<=nums.size()){
            ans.push_back(abs(pos2[j]-pos1[j-1]));
            j++;
        }
        return ans;
    }
};

3.
Link - https://leetcode.com/problems/first-missing-positive/
Code - 
#include<bits/stdc++.h>
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        unordered_map<int,int>mp;
        int i;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        for(i=1;i<=100000;i++){
            if(mp[i]==0){
                break;
            }
        }
        return i;
    }
};
